/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>/Users/jujsandhu/Documents/Second Year/Compilers/CompilersCWK/QSpecification.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCOMMENT = 2;
  public static final int ERROR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\15\1\17\1\20\1\16\22\0\1\25\1\35\1\22"+
    "\3\0\1\50\1\14\1\45\1\46\1\32\1\27\1\40\1\3\1\24"+
    "\1\26\12\1\1\31\1\47\1\36\1\34\1\37\2\0\32\2\1\43"+
    "\1\0\1\44\1\30\1\2\1\0\1\11\1\57\1\55\1\60\1\7"+
    "\1\10\1\53\1\56\1\51\2\2\1\12\1\63\1\52\1\54\1\62"+
    "\1\2\1\5\1\13\1\4\1\6\1\64\1\61\3\2\1\41\1\33"+
    "\1\42\7\0\1\17\u05da\0\12\23\206\0\12\23\306\0\12\23\u019c\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0\12\23\166\0"+
    "\12\23\166\0\12\23\166\0\12\23\166\0\12\23\340\0\12\23\166\0"+
    "\12\23\106\0\12\23\u0116\0\12\23\106\0\12\23\u0746\0\12\23\46\0"+
    "\12\23\u012c\0\12\23\200\0\12\23\246\0\12\23\6\0\12\23\266\0"+
    "\12\23\126\0\12\23\206\0\12\23\6\0\12\23\u03c2\0\1\21\13\0"+
    "\1\17\1\17\u85f6\0\12\23\u02a6\0\12\23\46\0\12\23\306\0\12\23"+
    "\166\0\12\23\u0196\0\12\23\u5316\0\12\23\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\6\3\1\1\1\5"+
    "\2\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\10\3\1\1\1\4"+
    "\6\1\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\11\1\1\4\6\1"+
    "\1\31\1\7\10\1\2\0\12\3\2\0\1\32\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\4\3\1\44\4\3\10\5\1\34\1\45\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\4\5\1\44"+
    "\4\5\10\0\1\42\1\43\4\0\1\44\4\0\1\46"+
    "\10\3\1\47\2\3\1\50\1\5\1\51\2\3\1\52"+
    "\5\3\6\5\1\47\2\5\1\51\2\5\1\52\5\5"+
    "\6\0\1\47\2\0\1\51\2\0\1\52\5\0\1\53"+
    "\1\54\1\3\1\55\1\56\2\3\1\57\1\3\1\60"+
    "\1\61\1\62\2\3\1\63\1\64\1\54\1\5\1\55"+
    "\1\56\2\5\1\57\1\5\1\60\1\61\1\62\2\5"+
    "\1\63\1\64\1\54\1\0\1\55\1\56\2\0\1\57"+
    "\1\0\1\60\1\61\1\62\2\0\1\63\1\64\1\3"+
    "\1\65\2\3\1\66\1\67\1\5\1\65\2\5\1\66"+
    "\1\67\1\0\1\65\2\0\1\66\1\67\1\70\1\3"+
    "\1\71\1\70\1\5\1\71\1\70\1\0\1\71\3\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\237\0\u02e6"+
    "\0\u031b\0\237\0\u0350\0\237\0\237\0\u0385\0\237\0\237"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u066b\0\u066b\0\u07de"+
    "\0\u066b\0\u066b\0\u0813\0\u0848\0\u066b\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u066b\0\u066b\0\u066b\0\u066b\0\u066b\0\u066b\0\u066b"+
    "\0\u066b\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\237\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\237\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u031b\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u02e6\0\u02e6\0\u10c5\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\u0109\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u0109\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u066b\0\237\0\u066b"+
    "\0\u066b\0\u066b\0\u066b\0\u066b\0\u066b\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u066b\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\237"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\237\0\u190d\0\u1942"+
    "\0\u1977\0\u19ac\0\u0e49\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u0109\0\u1b89\0\u1bbe\0\237\0\u1bf3"+
    "\0\u0109\0\u1c28\0\u1c5d\0\u0109\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u066b"+
    "\0\u1ed9\0\u1f0e\0\u066b\0\u1f43\0\u1f78\0\u066b\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\237\0\u21f4\0\u2229\0\237\0\u225e\0\u2293\0\237"+
    "\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u0109\0\u0109\0\u23d1"+
    "\0\u0109\0\u0109\0\u2406\0\u243b\0\u0109\0\u2470\0\u0109\0\u0109"+
    "\0\u0109\0\u24a5\0\u24da\0\u0109\0\u0109\0\u066b\0\u250f\0\u066b"+
    "\0\u066b\0\u2544\0\u2579\0\u066b\0\u25ae\0\u066b\0\u066b\0\u066b"+
    "\0\u25e3\0\u2618\0\u066b\0\u066b\0\237\0\u264d\0\237\0\237"+
    "\0\u2682\0\u26b7\0\237\0\u26ec\0\237\0\237\0\237\0\u2721"+
    "\0\u2756\0\237\0\237\0\u278b\0\u0109\0\u27c0\0\u27f5\0\u0109"+
    "\0\u0109\0\u282a\0\u066b\0\u285f\0\u2894\0\u066b\0\u066b\0\u28c9"+
    "\0\237\0\u28fe\0\u2933\0\237\0\237\0\u0109\0\u2968\0\u0109"+
    "\0\u066b\0\u299d\0\u066b\0\237\0\u29d2\0\237\0\u0109\0\u066b"+
    "\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\6\1\12"+
    "\1\13\1\6\1\14\1\15\1\16\2\17\1\0\1\17"+
    "\1\20\1\4\1\21\1\22\1\17\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\6\1\47\1\6\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\3\56\1\57\1\60\1\61\1\56\1\62"+
    "\1\63\1\56\1\64\1\65\1\56\1\17\3\66\3\56"+
    "\1\67\1\56\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\3\56\1\114"+
    "\1\56\1\115\1\116\1\117\1\120\1\121\1\122\3\4"+
    "\1\123\1\124\1\125\1\4\1\126\1\127\1\4\1\130"+
    "\1\131\1\4\2\132\1\0\1\132\3\4\1\22\1\4"+
    "\1\133\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\134\3\4\1\135\1\4\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\66\0\1\5\21\0"+
    "\1\144\1\145\41\0\2\6\1\0\10\6\35\0\14\6"+
    "\1\0\1\5\21\0\1\144\42\0\2\6\1\0\1\6"+
    "\1\146\6\6\35\0\7\6\1\147\4\6\1\0\2\6"+
    "\1\0\3\6\1\150\4\6\35\0\14\6\1\0\2\6"+
    "\1\0\6\6\1\151\1\6\35\0\14\6\1\0\2\6"+
    "\1\0\5\6\1\152\1\153\1\6\35\0\3\6\1\154"+
    "\10\6\1\0\2\6\1\0\3\6\1\155\4\6\35\0"+
    "\1\156\13\6\1\0\2\6\1\0\1\157\7\6\35\0"+
    "\14\6\15\160\4\0\44\160\15\161\4\0\1\161\1\162"+
    "\42\161\1\0\1\144\21\0\1\144\1\145\66\0\1\163"+
    "\3\0\1\164\63\0\1\165\67\0\1\166\64\0\1\167"+
    "\64\0\1\170\64\0\1\171\100\0\1\172\15\0\2\6"+
    "\1\0\4\6\1\173\3\6\35\0\1\6\1\174\12\6"+
    "\1\0\2\6\1\0\10\6\35\0\5\6\1\175\6\6"+
    "\1\0\2\6\1\0\10\6\35\0\3\6\1\176\10\6"+
    "\1\0\2\6\1\0\3\6\1\177\4\6\35\0\1\200"+
    "\2\6\1\201\10\6\1\0\2\6\1\0\10\6\35\0"+
    "\5\6\1\202\6\6\1\0\2\6\1\0\1\6\1\203"+
    "\6\6\35\0\14\6\1\0\2\6\1\0\5\6\1\204"+
    "\2\6\35\0\14\6\1\0\2\6\1\0\10\6\35\0"+
    "\3\6\1\205\10\6\15\66\1\0\14\66\1\0\47\66"+
    "\1\0\14\66\1\0\25\66\1\206\13\66\1\207\5\66"+
    "\1\0\14\66\1\0\44\66\1\210\2\66\1\0\14\66"+
    "\1\0\44\66\1\211\2\66\1\0\14\66\1\0\21\66"+
    "\1\212\17\66\1\213\5\66\1\0\14\66\1\0\16\66"+
    "\1\214\17\66\1\215\10\66\1\0\14\66\1\0\47\66"+
    "\1\0\14\66\1\164\47\66\1\0\13\66\1\216\1\0"+
    "\32\66\26\0\1\217\36\0\15\66\1\0\14\66\1\0"+
    "\1\66\1\220\45\66\1\0\14\66\1\0\1\66\1\221"+
    "\45\66\1\0\14\66\1\0\1\66\1\222\45\66\1\0"+
    "\14\66\1\0\1\66\1\223\45\66\1\0\14\66\1\0"+
    "\15\66\1\224\24\66\1\225\4\66\1\0\14\66\1\0"+
    "\17\66\1\226\27\66\1\0\14\66\1\0\23\66\1\227"+
    "\23\66\1\0\14\66\1\0\21\66\1\230\17\66\1\231"+
    "\5\66\1\0\14\66\1\0\16\66\1\232\2\66\1\233"+
    "\25\66\1\0\14\66\1\0\23\66\1\234\13\66\1\235"+
    "\7\66\1\0\14\66\1\0\43\66\1\236\3\66\1\0"+
    "\14\66\1\0\47\66\1\0\14\66\1\0\21\66\1\237"+
    "\10\66\60\0\1\240\13\0\1\241\67\0\1\242\64\0"+
    "\1\243\41\0\1\244\17\0\1\245\41\0\1\246\17\0"+
    "\1\247\112\0\1\164\42\0\1\250\41\0\1\251\70\0"+
    "\1\252\62\0\1\253\17\0\1\254\41\0\1\255\2\0"+
    "\1\256\66\0\1\257\13\0\1\260\70\0\1\261\127\0"+
    "\1\262\11\0\1\263\21\0\1\263\42\0\2\6\1\0"+
    "\2\6\1\264\5\6\35\0\14\6\1\0\2\6\1\0"+
    "\3\6\1\265\4\6\35\0\14\6\1\0\2\6\1\0"+
    "\1\266\4\6\1\267\2\6\35\0\14\6\1\0\2\6"+
    "\1\0\7\6\1\270\35\0\14\6\1\0\2\6\1\0"+
    "\6\6\1\271\1\6\35\0\14\6\1\0\2\6\1\0"+
    "\10\6\35\0\3\6\1\272\10\6\1\0\2\6\1\0"+
    "\1\6\1\273\6\6\35\0\14\6\1\0\2\6\1\0"+
    "\10\6\35\0\1\6\1\274\12\6\1\0\2\6\1\0"+
    "\7\6\1\275\35\0\14\6\1\0\2\6\1\0\1\6"+
    "\1\276\6\6\35\0\14\6\14\0\1\277\50\0\15\163"+
    "\1\17\1\300\2\0\44\163\1\0\2\6\1\0\1\301"+
    "\7\6\35\0\14\6\1\0\2\6\1\0\5\6\1\302"+
    "\2\6\35\0\14\6\1\0\2\6\1\0\10\6\35\0"+
    "\3\6\1\303\10\6\1\0\2\6\1\0\4\6\1\304"+
    "\3\6\35\0\14\6\1\0\2\6\1\0\10\6\35\0"+
    "\4\6\1\305\7\6\1\0\2\6\1\0\10\6\35\0"+
    "\1\306\13\6\1\0\2\6\1\0\10\6\35\0\1\307"+
    "\13\6\1\0\2\6\1\0\10\6\35\0\1\310\13\6"+
    "\1\0\2\6\1\0\10\6\35\0\1\311\13\6\7\66"+
    "\1\312\5\66\1\0\14\66\1\0\36\66\1\313\4\66"+
    "\1\314\3\66\1\0\14\66\1\0\45\66\1\315\1\66"+
    "\1\0\14\66\1\0\47\66\1\0\14\66\1\0\21\66"+
    "\1\316\15\66\1\317\7\66\1\0\14\66\1\0\47\66"+
    "\1\0\14\66\1\0\17\66\1\320\25\66\1\321\1\66"+
    "\1\0\14\66\1\0\37\66\1\322\7\66\1\0\14\66"+
    "\1\0\36\66\1\323\10\66\1\0\14\66\1\0\43\66"+
    "\1\324\3\66\1\0\14\66\1\0\47\66\1\0\14\66"+
    "\1\0\21\66\1\325\20\66\1\326\4\66\1\0\14\66"+
    "\1\0\47\66\1\0\14\66\1\0\22\66\1\327\24\66"+
    "\1\0\14\66\1\0\16\66\1\330\30\66\1\0\14\66"+
    "\1\0\16\66\1\331\30\66\1\0\14\66\1\0\16\66"+
    "\1\332\30\66\1\0\14\66\1\0\16\66\1\333\13\66"+
    "\7\0\1\334\61\0\1\335\4\0\1\336\66\0\1\337"+
    "\125\0\1\340\15\0\1\341\131\0\1\342\25\0\1\343"+
    "\56\0\1\344\63\0\1\345\71\0\1\346\127\0\1\347"+
    "\20\0\1\350\131\0\1\351\60\0\1\352\64\0\1\353"+
    "\64\0\1\354\64\0\1\355\14\0\2\6\1\0\3\6"+
    "\1\356\4\6\35\0\14\6\1\0\2\6\1\0\4\6"+
    "\1\357\3\6\35\0\14\6\1\0\2\6\1\0\2\6"+
    "\1\360\5\6\35\0\14\6\1\0\2\6\1\0\10\6"+
    "\35\0\7\6\1\361\4\6\1\0\2\6\1\0\3\6"+
    "\1\362\4\6\35\0\14\6\1\0\2\6\1\0\7\6"+
    "\1\264\35\0\14\6\1\0\2\6\1\0\5\6\1\363"+
    "\2\6\35\0\14\6\1\0\2\6\1\0\3\6\1\364"+
    "\4\6\35\0\14\6\1\0\2\6\1\0\1\365\7\6"+
    "\35\0\14\6\1\0\2\6\1\0\10\6\35\0\1\366"+
    "\13\6\15\0\1\17\50\0\2\6\1\0\1\6\1\367"+
    "\6\6\35\0\14\6\1\0\2\6\1\0\6\6\1\370"+
    "\1\6\35\0\14\6\1\0\2\6\1\0\1\371\7\6"+
    "\35\0\14\6\1\0\2\6\1\0\6\6\1\372\1\6"+
    "\35\0\14\6\1\0\2\6\1\0\10\6\35\0\1\6"+
    "\1\373\12\6\1\0\2\6\1\0\10\6\35\0\1\6"+
    "\1\374\12\6\1\0\2\6\1\0\10\6\35\0\7\6"+
    "\1\375\4\6\10\66\1\376\4\66\1\0\14\66\1\0"+
    "\40\66\1\377\6\66\1\0\14\66\1\0\47\66\1\0"+
    "\14\66\1\0\25\66\1\u0100\13\66\1\u0101\5\66\1\0"+
    "\14\66\1\0\43\66\1\u0102\3\66\1\0\14\66\1\0"+
    "\41\66\1\u0103\5\66\1\0\14\66\1\0\36\66\1\u0104"+
    "\10\66\1\0\14\66\1\0\47\66\1\0\14\66\1\0"+
    "\16\66\1\u0105\20\66\1\u0106\7\66\1\0\14\66\1\0"+
    "\44\66\1\u0107\2\66\1\0\14\66\1\0\36\66\1\u0108"+
    "\10\66\1\0\14\66\1\0\44\66\1\u0109\2\66\1\0"+
    "\14\66\1\0\47\66\1\0\14\66\1\0\17\66\1\u010a"+
    "\27\66\1\0\14\66\1\0\17\66\1\u010b\27\66\1\0"+
    "\14\66\1\0\25\66\1\u010c\4\66\10\0\1\u010d\62\0"+
    "\1\u010e\136\0\1\u010f\13\0\1\u0110\66\0\1\u0111\62\0"+
    "\1\u0112\61\0\1\u0113\131\0\1\u0114\20\0\1\u0115\71\0"+
    "\1\u0116\56\0\1\u0117\72\0\1\u0118\124\0\1\u0119\64\0"+
    "\1\u011a\72\0\1\u011b\5\0\2\6\1\0\1\6\1\u011c"+
    "\6\6\35\0\14\6\1\0\2\6\1\0\1\u011d\7\6"+
    "\35\0\14\6\1\0\2\6\1\0\5\6\1\u011e\2\6"+
    "\35\0\14\6\1\0\2\6\1\0\10\6\35\0\1\6"+
    "\1\u011f\12\6\1\0\2\6\1\0\3\6\1\u0120\4\6"+
    "\35\0\14\6\1\0\2\6\1\0\1\u0121\7\6\35\0"+
    "\14\6\5\66\1\u0122\7\66\1\0\14\66\1\0\36\66"+
    "\1\u0123\10\66\1\0\14\66\1\0\43\66\1\u0124\3\66"+
    "\1\0\14\66\1\0\47\66\1\0\14\66\1\0\17\66"+
    "\1\u0125\21\66\1\u0126\5\66\1\0\14\66\1\0\36\66"+
    "\1\u0127\10\66\1\0\14\66\1\0\32\66\5\0\1\u0128"+
    "\63\0\1\u0129\71\0\1\u012a\125\0\1\u012b\21\0\1\u012c"+
    "\61\0\1\u012d\61\0\2\6\1\0\10\6\35\0\1\6"+
    "\1\u012e\12\6\1\0\2\6\1\0\10\6\35\0\4\6"+
    "\1\u012f\7\6\1\0\2\6\1\0\10\6\35\0\2\6"+
    "\1\u0130\11\6\15\66\1\0\14\66\1\0\17\66\1\u0131"+
    "\27\66\1\0\14\66\1\0\22\66\1\u0132\24\66\1\0"+
    "\14\66\1\0\20\66\1\u0133\11\66\52\0\1\u0134\67\0"+
    "\1\u0135\62\0\1\u0136\12\0\2\6\1\0\10\6\35\0"+
    "\5\6\1\u0137\6\6\15\66\1\0\14\66\1\0\23\66"+
    "\1\u0138\6\66\56\0\1\u0139\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10759];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\2\11\4\1\10\11\56\1\1\11\6\1\1\11"+
    "\11\1\2\0\12\1\2\0\1\1\1\0\7\11\24\1"+
    "\1\11\20\1\10\0\1\11\1\1\4\0\1\11\4\0"+
    "\14\1\1\11\34\1\6\0\1\11\2\0\1\11\2\0"+
    "\1\11\5\0\37\1\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\3\11\2\0\2\11\14\1\1\0\1\11\2\0"+
    "\2\11\6\1\1\11\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private StringBuilder input = null;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(ERROR);
						input = new StringBuilder(yytext());
          }
        case 59: break;
        case 2: 
          { return new Symbol(sym.INTEGER,Integer.parseInt(yytext()));
          }
        case 60: break;
        case 3: 
          { return new Symbol(sym.ID,yyline, yycolumn, yytext());
          }
        case 61: break;
        case 4: 
          { return new Symbol(sym.MINUS,yyline, yycolumn);
          }
        case 62: break;
        case 5: 
          { 
          }
        case 63: break;
        case 6: 
          { return new Symbol(sym.DOT,yyline, yycolumn);
          }
        case 64: break;
        case 7: 
          { return new Symbol(sym.DIVIDE,yyline, yycolumn);
          }
        case 65: break;
        case 8: 
          { return new Symbol(sym.PLUS,yyline, yycolumn);
          }
        case 66: break;
        case 9: 
          { return new Symbol(sym.POWER,yyline, yycolumn);
          }
        case 67: break;
        case 10: 
          { return new Symbol(sym.COLON,yyline, yycolumn);
          }
        case 68: break;
        case 11: 
          { return new Symbol(sym.TIMES,yyline, yycolumn);
          }
        case 69: break;
        case 12: 
          { return new Symbol(sym.LINE,yyline, yycolumn);
          }
        case 70: break;
        case 13: 
          { return new Symbol(sym.EQ,yyline, yycolumn);
          }
        case 71: break;
        case 14: 
          { return new Symbol(sym.NEGATE,yyline, yycolumn);
          }
        case 72: break;
        case 15: 
          { return new Symbol(sym.LT,yyline, yycolumn);
          }
        case 73: break;
        case 16: 
          { return new Symbol(sym.GT,yyline, yycolumn);
          }
        case 74: break;
        case 17: 
          { return new Symbol(sym.COMMA,yyline, yycolumn);
          }
        case 75: break;
        case 18: 
          { return new Symbol(sym.LBRACE,yyline, yycolumn);
          }
        case 76: break;
        case 19: 
          { return new Symbol(sym.RBRACE,yyline, yycolumn);
          }
        case 77: break;
        case 20: 
          { return new Symbol(sym.LBRACKET,yyline, yycolumn);
          }
        case 78: break;
        case 21: 
          { return new Symbol(sym.RBRACKET,yyline, yycolumn);
          }
        case 79: break;
        case 22: 
          { return new Symbol(sym.LPAREN,yyline, yycolumn);
          }
        case 80: break;
        case 23: 
          { return new Symbol(sym.RPAREN,yyline, yycolumn);
          }
        case 81: break;
        case 24: 
          { return new Symbol(sym.SEMI,yyline, yycolumn);
          }
        case 82: break;
        case 25: 
          { yypushback(1);
					yybegin(YYINITIAL);
					System.err.println("Error in line " + yyline + ": character " + input + " in column "+yycolumn);
          }
        case 83: break;
        case 26: 
          { return new Symbol(sym.STRINGLITERAL, yytext().substring(1, yytext().length() - 1));
          }
        case 84: break;
        case 27: 
          { yybegin(INCOMMENT);
          }
        case 85: break;
        case 28: 
          { return new Symbol(sym.CONCAT,yyline, yycolumn);
          }
        case 86: break;
        case 29: 
          { return new Symbol(sym.EQQ,yyline, yycolumn);
          }
        case 87: break;
        case 30: 
          { return new Symbol(sym.NOTEQ,yyline, yycolumn);
          }
        case 88: break;
        case 31: 
          { return new Symbol(sym.LTEQ,yyline, yycolumn);
          }
        case 89: break;
        case 32: 
          { return new Symbol(sym.GTEQ,yyline, yycolumn);
          }
        case 90: break;
        case 33: 
          { return new Symbol(sym.AND,yyline, yycolumn);
          }
        case 91: break;
        case 34: 
          { return new Symbol(sym.IF,yyline, yycolumn);
          }
        case 92: break;
        case 35: 
          { return new Symbol(sym.IN,yyline, yycolumn);
          }
        case 93: break;
        case 36: 
          { return new Symbol(sym.DO,yyline, yycolumn);
          }
        case 94: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 95: break;
        case 38: 
          { return new Symbol(sym.FLOATLITERAL, yytext());
          }
        case 96: break;
        case 39: 
          { return new Symbol(sym.LEN,yyline, yycolumn);
          }
        case 97: break;
        case 40: 
          { return new Symbol(sym.CHARLITERAL, yytext().charAt(1));
          }
        case 98: break;
        case 41: 
          { return new Symbol(sym.INT,yyline, yycolumn);
          }
        case 99: break;
        case 42: 
          { return new Symbol(sym.DEF,yyline, yycolumn);
          }
        case 100: break;
        case 43: 
          { return new Symbol(sym.BOOLEANLITERAL, yytext().equals("true"));
          }
        case 101: break;
        case 44: 
          { return new Symbol(sym.TDEF,yyline, yycolumn);
          }
        case 102: break;
        case 45: 
          { return new Symbol(sym.READ,yyline, yycolumn);
          }
        case 103: break;
        case 46: 
          { return new Symbol(sym.ELSE,yyline, yycolumn);
          }
        case 104: break;
        case 47: 
          { return new Symbol(sym.LIST,yyline, yycolumn);
          }
        case 105: break;
        case 48: 
          { return new Symbol(sym.CHAR,yyline, yycolumn);
          }
        case 106: break;
        case 49: 
          { return new Symbol(sym.BOOL,yyline, yycolumn);
          }
        case 107: break;
        case 50: 
          { return new Symbol(sym.DICT,yyline, yycolumn);
          }
        case 108: break;
        case 51: 
          { return new Symbol(sym.MAIN,yyline, yycolumn);
          }
        case 109: break;
        case 52: 
          { return new Symbol(sym.VOID,yyline, yycolumn);
          }
        case 110: break;
        case 53: 
          { return new Symbol(sym.FLOAT,yyline, yycolumn);
          }
        case 111: break;
        case 54: 
          { return new Symbol(sym.WHILE,yyline, yycolumn);
          }
        case 112: break;
        case 55: 
          { return new Symbol(sym.PRINT,yyline, yycolumn);
          }
        case 113: break;
        case 56: 
          { return new Symbol(sym.RETURN,yyline, yycolumn);
          }
        case 114: break;
        case 57: 
          { return new Symbol(sym.STRING,yyline, yycolumn);
          }
        case 115: break;
        case 58: 
          { return new Symbol(sym.FOREACH,yyline, yycolumn);
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
