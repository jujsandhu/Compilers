import java_cup.runtime.Symbol;

/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>/Users/jujsandhu/Documents/Second Year/Compilers/CompilersCWK/QSpecification.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\20\1\21\1\20\1\20\22\0\1\5\1\40\1\17"+
    "\3\0\1\45\1\16\1\30\1\31\1\34\1\32\1\25\1\2\1\0"+
    "\1\35\12\1\1\24\1\36\1\41\1\37\1\42\2\0\32\3\1\22"+
    "\1\0\1\26\1\33\1\4\1\0\1\13\1\53\1\51\1\54\1\11"+
    "\1\12\1\47\1\52\1\46\2\3\1\14\1\57\1\27\1\50\1\56"+
    "\1\3\1\7\1\15\1\6\1\10\1\60\1\55\3\3\1\43\1\23"+
    "\1\44\7\0\1\21\u1fa2\0\1\21\1\21\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\6\4\3\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\1"+
    "\10\4\1\3\6\5\1\14\1\15\11\5\1\0\12\4"+
    "\2\0\1\25\7\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\5\4\1\40\5\4"+
    "\10\0\1\41\1\36\1\37\5\0\1\40\13\0\10\4"+
    "\1\42\2\4\1\43\14\0\1\44\3\4\1\45\6\4"+
    "\6\0\1\42\2\0\1\44\3\0\1\45\7\0\1\46"+
    "\5\0\1\47\1\50\1\4\1\51\1\52\2\4\1\0"+
    "\1\53\1\4\10\0\1\26\5\0\1\54\1\4\1\55"+
    "\1\56\1\57\3\4\1\60\1\61\1\50\1\0\1\51"+
    "\1\52\2\0\1\53\2\0\1\55\1\56\1\57\3\0"+
    "\1\60\1\61\1\62\1\63\1\0\1\63\1\4\1\64"+
    "\1\4\3\0\1\4\20\0\1\65\1\66\1\67\1\4"+
    "\1\0\1\64\2\0\1\65\1\66\1\67\1\0\1\70"+
    "\1\4\1\71\10\0\1\72\20\0\1\73\1\70\1\0"+
    "\1\72\1\73\1\74\1\71\37\0\1\74\25\0\1\54"+
    "\4\0\1\54\16\0\1\71\13\0\1\54\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\304\0\142\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\142\0\142\0\142\0\142\0\142\0\142\0\u02df"+
    "\0\142\0\u0310\0\u0341\0\u0372\0\u03a3\0\142\0\142\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\142\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\142\0\u03d4\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u024c\0\u024c"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\142"+
    "\0\142\0\142\0\142\0\142\0\142\0\142\0\142\0\304"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\304\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\142\0\142\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\142\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\142\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\304\0\u175a\0\u178b\0\u17bc\0\304\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\142\0\u1a39\0\u1a6a\0\142\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\142\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\142\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\304\0\304"+
    "\0\u1d7a\0\304\0\304\0\u1dab\0\u1ddc\0\u1e0d\0\304\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u0bad\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\142\0\u20ec"+
    "\0\304\0\304\0\304\0\u211d\0\u214e\0\u217f\0\304\0\304"+
    "\0\142\0\u21b0\0\142\0\142\0\u21e1\0\u2212\0\142\0\u2243"+
    "\0\u2274\0\142\0\142\0\142\0\u22a5\0\u22d6\0\u2307\0\142"+
    "\0\142\0\142\0\142\0\u2338\0\u1291\0\u2369\0\304\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u273d\0\u276e\0\304\0\304\0\304\0\u279f"+
    "\0\u27d0\0\142\0\u2801\0\u2832\0\142\0\142\0\142\0\u2863"+
    "\0\304\0\u2894\0\142\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\304\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\304\0\142\0\u2d5d\0\142"+
    "\0\142\0\304\0\u23fc\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda"+
    "\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162"+
    "\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea"+
    "\0\u331b\0\u334c\0\142\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441"+
    "\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9"+
    "\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751"+
    "\0\u26aa\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u16f8\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff"+
    "\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u29eb\0\u3af4\0\u3b25\0\u3b56"+
    "\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde"+
    "\0\u32ea\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35"+
    "\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd"+
    "\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\6\1\7\1\10\1\11\1\6"+
    "\1\12\1\13\1\6\1\14\1\15\1\16\1\17\1\7"+
    "\1\0\1\20\1\3\1\21\1\22\1\3\1\6\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\6\1\42"+
    "\1\6\1\43\1\44\1\45\1\46\1\47\1\50\2\7"+
    "\1\51\3\7\1\52\1\53\1\7\1\54\1\55\1\7"+
    "\1\56\1\57\2\7\2\0\2\7\1\21\1\22\2\7"+
    "\1\23\1\24\1\25\1\26\1\60\1\61\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\62\1\63\2\7"+
    "\1\64\1\7\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\62\0\1\4\60\0\1\6\1\0\2\6\1\0\10\6"+
    "\4\0\1\73\4\0\1\6\16\0\13\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\1\74\6\6\4\0\1\73"+
    "\4\0\1\6\16\0\6\6\1\75\4\6\1\0\1\6"+
    "\1\0\2\6\1\0\3\6\1\76\4\6\4\0\1\73"+
    "\4\0\1\6\16\0\13\6\1\0\1\6\1\0\2\6"+
    "\1\0\6\6\1\77\1\6\4\0\1\73\4\0\1\6"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\5\6"+
    "\1\100\1\101\1\6\4\0\1\73\4\0\1\6\16\0"+
    "\2\6\1\102\10\6\1\0\1\6\1\0\2\6\1\0"+
    "\3\6\1\103\4\6\4\0\1\73\4\0\1\6\16\0"+
    "\1\104\12\6\1\0\1\6\1\0\2\6\1\0\1\105"+
    "\7\6\4\0\1\73\4\0\1\6\16\0\13\6\3\0"+
    "\1\106\2\0\10\106\11\0\1\106\16\0\13\106\17\107"+
    "\1\110\2\0\37\107\1\0\1\111\1\112\3\0\1\113"+
    "\3\0\1\114\3\0\1\115\1\116\3\0\1\117\2\0"+
    "\1\120\56\0\1\121\70\0\1\122\63\0\1\123\60\0"+
    "\1\124\60\0\1\125\60\0\1\126\66\0\1\127\14\0"+
    "\1\6\1\0\2\6\1\0\4\6\1\130\3\6\4\0"+
    "\1\73\4\0\1\131\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\6\6\1\132\1\6\4\0\1\73\4\0"+
    "\1\6\16\0\4\6\1\133\6\6\1\0\1\6\1\0"+
    "\2\6\1\0\10\6\4\0\1\73\4\0\1\6\16\0"+
    "\2\6\1\134\10\6\1\0\1\6\1\0\2\6\1\0"+
    "\3\6\1\135\4\6\4\0\1\73\4\0\1\6\16\0"+
    "\1\136\1\6\1\137\10\6\1\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\6\16\0\4\6"+
    "\1\140\6\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\141\1\142\5\6\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\5\6\1\143"+
    "\2\6\4\0\1\73\4\0\1\6\16\0\13\6\1\0"+
    "\1\6\1\0\2\6\1\0\10\6\4\0\1\73\4\0"+
    "\1\6\16\0\2\6\1\144\10\6\54\0\1\145\15\0"+
    "\1\146\63\0\1\147\60\0\1\150\33\0\1\151\21\0"+
    "\1\152\34\0\1\153\20\0\1\154\107\0\1\155\35\0"+
    "\1\156\14\0\1\157\45\0\1\160\35\0\1\161\56\0"+
    "\1\162\21\0\1\163\34\0\1\164\1\0\1\165\62\0"+
    "\1\166\15\0\1\167\1\170\63\0\1\171\115\0\1\172"+
    "\11\0\1\173\1\174\2\175\1\0\10\175\1\176\1\177"+
    "\4\0\1\200\2\0\1\175\16\0\13\175\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\201\5\6\4\0\1\73"+
    "\4\0\1\6\16\0\13\6\1\0\1\6\1\0\2\6"+
    "\1\0\3\6\1\202\4\6\4\0\1\73\4\0\1\6"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\1\203"+
    "\4\6\1\204\2\6\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\7\6\1\205"+
    "\4\0\1\73\4\0\1\6\16\0\13\6\1\0\1\6"+
    "\1\0\2\6\1\0\6\6\1\206\1\6\4\0\1\73"+
    "\4\0\1\6\16\0\13\6\1\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\6\16\0\2\6"+
    "\1\207\10\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\1\210\6\6\4\0\1\73\4\0\1\6\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\10\6\4\0\1\73"+
    "\4\0\1\211\16\0\13\6\1\0\1\6\1\0\2\6"+
    "\1\0\7\6\1\212\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\1\6\1\213"+
    "\6\6\4\0\1\73\4\0\1\6\16\0\13\6\16\0"+
    "\1\214\43\0\1\111\1\112\3\0\1\113\3\0\1\114"+
    "\3\0\1\115\1\116\5\0\1\215\1\120\33\0\1\111"+
    "\66\0\1\216\64\0\1\217\50\0\1\220\2\0\10\220"+
    "\11\0\1\220\16\0\13\220\17\116\1\221\2\0\37\116"+
    "\1\0\1\222\1\223\3\0\1\224\3\0\1\225\3\0"+
    "\1\226\1\227\3\0\1\230\36\0\1\6\1\0\2\6"+
    "\1\0\1\231\7\6\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\5\6\1\232"+
    "\2\6\4\0\1\73\4\0\1\6\16\0\13\6\1\0"+
    "\1\6\1\0\2\6\1\0\5\6\1\233\2\6\4\0"+
    "\1\73\4\0\1\6\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\10\6\4\0\1\73\4\0\1\6\16\0"+
    "\2\6\1\234\10\6\1\0\1\6\1\0\2\6\1\0"+
    "\4\6\1\235\3\6\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\10\6\4\0"+
    "\1\73\4\0\1\6\16\0\3\6\1\236\7\6\1\0"+
    "\1\6\1\0\2\6\1\0\10\6\4\0\1\73\4\0"+
    "\1\6\16\0\1\237\12\6\1\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\6\16\0\1\240"+
    "\12\6\1\0\1\6\1\0\2\6\1\0\10\6\4\0"+
    "\1\73\4\0\1\6\16\0\5\6\1\241\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\10\6\4\0\1\73\4\0"+
    "\1\6\16\0\1\242\12\6\1\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\6\16\0\1\243"+
    "\12\6\11\0\1\244\55\0\1\245\4\0\1\246\62\0"+
    "\1\247\113\0\1\250\17\0\1\251\100\0\1\252\46\0"+
    "\1\253\52\0\1\254\57\0\1\255\65\0\1\256\60\0"+
    "\1\257\115\0\1\260\22\0\1\261\117\0\1\262\55\0"+
    "\1\263\60\0\1\264\65\0\1\265\53\0\1\266\60\0"+
    "\1\267\13\0\1\173\22\0\1\270\1\0\1\271\33\0"+
    "\1\272\60\0\1\175\1\0\2\175\1\0\10\175\6\0"+
    "\1\270\1\0\1\271\1\175\16\0\13\175\3\0\1\273"+
    "\2\0\10\273\11\0\1\273\16\0\13\273\17\177\1\274"+
    "\2\0\37\177\1\0\1\275\1\0\2\276\1\0\10\276"+
    "\11\0\1\276\16\0\13\276\1\0\1\6\1\0\2\6"+
    "\1\0\3\6\1\277\4\6\4\0\1\73\4\0\1\6"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\4\6"+
    "\1\300\3\6\4\0\1\73\4\0\1\6\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\301\5\6"+
    "\4\0\1\73\4\0\1\6\16\0\13\6\1\0\1\6"+
    "\1\0\2\6\1\0\10\6\4\0\1\73\4\0\1\6"+
    "\16\0\6\6\1\302\4\6\1\0\1\6\1\0\2\6"+
    "\1\0\3\6\1\303\4\6\4\0\1\73\4\0\1\6"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\7\6"+
    "\1\201\4\0\1\73\4\0\1\6\16\0\13\6\1\0"+
    "\1\6\1\0\2\6\1\0\5\6\1\304\2\6\4\0"+
    "\1\73\4\0\1\6\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\3\6\1\305\4\6\4\0\1\73\4\0"+
    "\1\6\16\0\13\6\1\0\1\6\1\0\2\6\1\0"+
    "\10\6\4\0\1\73\4\0\1\6\1\306\15\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\307\7\6\4\0"+
    "\1\73\4\0\1\6\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\10\6\4\0\1\73\4\0\1\6\16\0"+
    "\1\310\12\6\1\0\1\111\1\112\66\0\1\311\64\0"+
    "\1\312\62\0\1\313\42\0\1\116\1\314\1\315\3\116"+
    "\1\316\3\116\1\317\3\116\1\320\1\221\2\0\4\116"+
    "\1\321\32\116\1\0\1\222\22\0\1\322\35\0\1\222"+
    "\66\0\1\323\64\0\1\324\50\0\1\325\2\0\10\325"+
    "\11\0\1\325\16\0\13\325\17\227\1\326\2\0\37\227"+
    "\26\0\1\327\33\0\1\6\1\0\2\6\1\0\7\6"+
    "\1\330\4\0\1\73\4\0\1\6\16\0\13\6\1\0"+
    "\1\6\1\0\2\6\1\0\1\6\1\331\6\6\4\0"+
    "\1\73\4\0\1\6\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\6\6\1\332\1\6\4\0\1\73\4\0"+
    "\1\6\16\0\13\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\333\7\6\4\0\1\73\4\0\1\6\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\6\6\1\334\1\6"+
    "\4\0\1\73\4\0\1\6\16\0\13\6\1\0\1\6"+
    "\1\0\2\6\1\0\10\6\4\0\1\73\4\0\1\335"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\6\6"+
    "\1\336\1\6\4\0\1\73\4\0\1\6\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\10\6\4\0\1\73"+
    "\4\0\1\337\16\0\13\6\1\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\6\16\0\6\6"+
    "\1\340\4\6\12\0\1\341\56\0\1\342\124\0\1\343"+
    "\15\0\1\344\62\0\1\345\56\0\1\346\55\0\1\347"+
    "\120\0\1\350\27\0\1\351\52\0\1\352\65\0\1\353"+
    "\52\0\1\354\66\0\1\355\73\0\1\356\45\0\1\357"+
    "\73\0\1\360\105\0\1\361\5\0\1\275\1\0\2\276"+
    "\1\0\10\276\10\0\1\362\1\276\16\0\13\276\1\0"+
    "\1\272\24\0\1\363\50\0\1\364\42\0\17\177\1\274"+
    "\2\0\4\177\1\365\32\177\1\0\1\275\24\0\1\362"+
    "\33\0\1\276\1\0\2\276\1\0\10\276\10\0\1\362"+
    "\1\276\16\0\13\276\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\1\366\6\6\4\0\1\73\4\0\1\6\16\0"+
    "\13\6\1\0\1\6\1\0\2\6\1\0\1\367\7\6"+
    "\4\0\1\73\4\0\1\6\16\0\13\6\1\0\1\6"+
    "\1\0\2\6\1\0\5\6\1\370\2\6\4\0\1\73"+
    "\4\0\1\6\16\0\13\6\3\0\2\371\1\0\10\371"+
    "\1\0\1\372\2\0\1\373\4\0\1\371\16\0\13\371"+
    "\1\0\1\6\1\0\2\6\1\0\10\6\4\0\1\73"+
    "\4\0\1\374\16\0\13\6\11\0\1\375\64\0\1\311"+
    "\44\0\1\111\1\112\3\0\1\113\3\0\1\114\3\0"+
    "\1\115\1\116\5\0\1\376\1\120\32\0\1\116\1\314"+
    "\1\315\3\116\1\316\3\116\1\317\3\116\1\320\1\221"+
    "\2\0\3\116\1\377\1\321\33\116\1\314\15\116\1\221"+
    "\2\0\46\116\1\u0100\7\116\1\221\2\0\52\116\1\u0101"+
    "\3\116\1\221\2\0\42\116\1\u0102\2\116\10\u0102\1\116"+
    "\1\221\2\0\5\116\1\u0102\16\116\13\u0102\1\0\1\u0103"+
    "\1\u0104\3\0\1\u0105\3\0\1\u0106\3\0\1\u0107\1\u0108"+
    "\51\0\1\u0109\64\0\1\u010a\62\0\1\u010b\42\0\17\227"+
    "\1\326\2\0\2\227\1\u010c\34\227\1\0\1\6\1\0"+
    "\2\6\1\0\7\6\1\u010d\4\0\1\73\4\0\1\6"+
    "\16\0\13\6\1\0\1\6\1\0\2\6\1\0\3\6"+
    "\1\u010e\4\6\4\0\1\73\4\0\1\6\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\u010f\7\6\4\0"+
    "\1\73\4\0\1\6\16\0\13\6\1\0\1\6\1\0"+
    "\2\6\1\0\10\6\4\0\1\73\4\0\1\6\16\0"+
    "\1\u0110\12\6\7\0\1\u0111\57\0\1\u0112\65\0\1\u0113"+
    "\74\0\1\u0114\46\0\1\u0115\54\0\1\u0116\55\0\1\u0117"+
    "\120\0\1\u0118\40\0\1\363\33\0\1\6\1\0\2\6"+
    "\1\0\10\6\4\0\1\73\4\0\1\u0119\16\0\13\6"+
    "\1\0\1\6\1\0\2\6\1\0\10\6\4\0\1\73"+
    "\4\0\1\6\16\0\3\6\1\u011a\7\6\1\0\1\371"+
    "\1\0\2\371\1\0\10\371\11\0\1\371\1\0\1\u011b"+
    "\14\0\13\371\17\372\1\u011c\2\0\37\372\1\0\1\u011d"+
    "\1\u011e\3\0\1\u011f\3\0\1\u0120\3\0\1\u0121\1\u0122"+
    "\6\0\1\u0123\33\0\1\6\1\0\2\6\1\0\10\6"+
    "\4\0\1\73\4\0\1\6\16\0\1\6\1\u0124\11\6"+
    "\1\0\1\111\1\112\3\0\1\113\3\0\1\114\3\0"+
    "\1\115\1\116\5\0\1\u0125\1\120\50\0\1\115\42\0"+
    "\1\116\1\314\1\315\14\116\1\221\2\0\47\116\1\u0126"+
    "\6\116\1\221\2\0\53\116\1\u0127\2\116\1\221\2\0"+
    "\55\116\1\u0128\1\221\2\0\37\116\1\0\1\u0129\1\223"+
    "\3\0\1\224\3\0\1\225\3\0\1\226\1\227\3\0"+
    "\1\230\1\0\1\u012a\34\0\1\u0103\66\0\1\u012b\64\0"+
    "\1\u012c\50\0\1\u012d\2\0\10\u012d\11\0\1\u012d\16\0"+
    "\13\u012d\17\u0108\1\u012e\2\0\37\u0108\11\0\1\u010b\64\0"+
    "\1\u0109\67\0\1\322\34\0\1\227\1\u012f\1\u0130\3\227"+
    "\1\u0131\3\227\1\u0132\3\227\1\u0133\1\u0134\2\0\37\227"+
    "\1\0\1\6\1\0\2\6\1\0\10\6\4\0\1\73"+
    "\4\0\1\6\16\0\3\6\1\u0135\7\6\27\0\1\u0136"+
    "\102\0\1\u0137\56\0\1\u0138\62\0\1\u0139\10\0\1\6"+
    "\1\0\2\6\1\0\10\6\4\0\1\73\4\0\1\6"+
    "\16\0\4\6\1\u013a\6\6\17\372\1\u011c\2\0\7\372"+
    "\1\u013b\27\372\1\0\1\u011d\1\u011e\3\0\1\u011f\3\0"+
    "\1\u0120\3\0\1\u0121\1\u0122\5\0\1\u013c\1\u0123\33\0"+
    "\1\u011d\66\0\1\u013d\64\0\1\u013e\50\0\1\u013f\2\0"+
    "\10\u013f\11\0\1\u013f\16\0\13\u013f\17\u0122\1\u0140\2\0"+
    "\37\u0122\31\0\1\u011b\35\0\1\113\3\0\1\114\46\0"+
    "\11\116\1\u0141\5\116\1\221\2\0\54\116\1\u0126\1\116"+
    "\1\221\2\0\40\116\1\314\1\315\3\116\1\316\3\116"+
    "\1\317\3\116\1\320\1\221\2\0\3\116\1\u0142\1\321"+
    "\32\116\1\0\1\u0129\1\223\3\0\1\224\3\0\1\225"+
    "\3\0\1\226\1\227\3\0\1\230\1\322\1\u012a\34\0"+
    "\1\222\1\223\3\0\1\224\3\0\1\225\3\0\1\226"+
    "\1\227\51\0\1\u0143\64\0\1\u0144\62\0\1\u0145\42\0"+
    "\1\u0108\1\u0146\1\u0147\3\u0108\1\u0148\3\u0108\1\u0149\3\u0108"+
    "\1\u014a\1\u014b\2\0\1\u0108\1\u014c\1\u0108\1\u014d\33\u0108"+
    "\1\227\1\u014e\1\u014f\3\227\1\u0150\3\227\1\u0151\3\227"+
    "\1\u0152\1\326\2\0\1\227\1\u0153\1\227\1\u0154\34\227"+
    "\1\u012f\15\227\1\326\2\0\46\227\1\u0155\7\227\1\326"+
    "\2\0\52\227\1\u0156\3\227\1\326\2\0\42\227\1\u0157"+
    "\2\227\10\u0157\1\227\1\326\2\0\5\227\1\u0157\16\227"+
    "\13\u0157\17\u0158\1\u0159\2\0\2\u0158\1\u015a\34\u0158\52\0"+
    "\1\u015b\7\0\1\u011d\1\u011e\66\0\1\u015c\64\0\1\u015d"+
    "\62\0\1\u015e\42\0\1\u0122\1\u015f\1\u0160\3\u0122\1\u0161"+
    "\3\u0122\1\u0162\3\u0122\1\u0163\1\u0140\2\0\4\u0122\1\u0164"+
    "\32\u0122\1\116\1\314\1\315\3\116\1\316\3\116\1\317"+
    "\3\116\1\320\1\221\2\0\3\116\1\u0165\1\321\50\116"+
    "\1\320\1\221\2\0\37\116\11\0\1\u0145\64\0\1\u0143"+
    "\44\0\1\222\1\223\3\0\1\224\3\0\1\225\3\0"+
    "\1\226\1\227\3\0\1\230\1\0\1\u012a\33\0\1\u0108"+
    "\1\u0146\15\u0108\1\u012e\2\0\2\u0108\1\u0166\35\u0108\1\u0146"+
    "\15\u0108\1\u012e\2\0\46\u0108\1\u0167\7\u0108\1\u012e\2\0"+
    "\52\u0108\1\u0168\3\u0108\1\u012e\2\0\42\u0108\1\u0169\2\u0108"+
    "\10\u0169\1\u0108\1\u012e\2\0\5\u0108\1\u0169\16\u0108\13\u0169"+
    "\1\u0158\1\u016a\1\u016b\3\u0158\1\u016c\3\u0158\1\u016d\3\u0158"+
    "\1\u016e\1\u0159\2\0\1\u0158\1\u016f\1\u0158\1\u0170\33\u0158"+
    "\17\u0108\1\u012e\2\0\4\u0108\1\u0171\33\u0108\1\u0146\1\u0147"+
    "\3\u0108\1\u0148\3\u0108\1\u0149\3\u0108\1\u014a\1\u014b\2\0"+
    "\37\u0108\1\227\1\u014e\1\u014f\3\227\1\u0150\3\227\1\u0151"+
    "\3\227\1\u0152\1\326\2\0\1\227\1\u0153\1\u010c\1\u0154"+
    "\34\227\1\u0172\15\227\1\326\2\0\46\227\1\u0173\7\227"+
    "\1\326\2\0\52\227\1\u0174\3\227\1\326\2\0\42\227"+
    "\1\u0175\2\227\10\u0175\1\227\1\326\2\0\5\227\1\u0175"+
    "\16\227\13\u0175\17\227\1\326\2\0\4\227\1\u0176\33\227"+
    "\1\u0172\1\u014f\3\227\1\u0150\3\227\1\u0151\3\227\1\u0152"+
    "\1\326\2\0\47\227\1\u0177\6\227\1\326\2\0\53\227"+
    "\1\u0178\2\227\1\326\2\0\55\227\1\u0179\1\326\2\0"+
    "\37\227\17\u0158\1\u0159\2\0\40\u0158\1\u016a\1\u016b\3\u0158"+
    "\1\u016c\3\u0158\1\u016d\3\u0158\1\u016e\1\u0159\2\0\1\u0158"+
    "\1\u016f\1\u015a\1\u0170\34\u0158\1\u017a\1\u017b\3\u0158\1\u017c"+
    "\3\u0158\1\u017d\3\u0158\1\u017e\1\u0159\2\0\37\u0158\11\0"+
    "\1\u017f\64\0\1\u015c\44\0\1\u011d\1\u011e\3\0\1\u011f"+
    "\3\0\1\u0120\3\0\1\u0121\1\u0122\5\0\1\u0180\1\u0123"+
    "\32\0\1\u0122\1\u015f\1\u0160\3\u0122\1\u0161\3\u0122\1\u0162"+
    "\3\u0122\1\u0163\1\u0140\2\0\3\u0122\1\u0181\1\u0164\33\u0122"+
    "\1\u015f\15\u0122\1\u0140\2\0\46\u0122\1\u0182\7\u0122\1\u0140"+
    "\2\0\52\u0122\1\u0183\3\u0122\1\u0140\2\0\42\u0122\1\u0184"+
    "\2\u0122\10\u0184\1\u0122\1\u0140\2\0\5\u0122\1\u0184\16\u0122"+
    "\13\u0184\17\u0122\1\u0140\2\0\7\u0122\1\u0185\27\u0122\6\116"+
    "\1\316\3\116\1\317\4\116\1\221\2\0\37\116\1\u0108"+
    "\1\u0186\1\u0187\3\u0108\1\u0188\3\u0108\1\u0189\3\u0108\1\u018a"+
    "\1\u012e\2\0\47\u0108\1\u018b\6\u0108\1\u012e\2\0\53\u0108"+
    "\1\u018c\2\u0108\1\u012e\2\0\55\u0108\1\u018d\1\u012e\2\0"+
    "\37\u0108\1\u0158\1\u016a\15\u0158\1\u0159\2\0\2\u0158\1\u015a"+
    "\35\u0158\1\u016a\15\u0158\1\u0159\2\0\46\u0158\1\u018e\7\u0158"+
    "\1\u0159\2\0\52\u0158\1\u018f\3\u0158\1\u0159\2\0\42\u0158"+
    "\1\u0190\2\u0158\10\u0190\1\u0158\1\u0159\2\0\5\u0158\1\u0190"+
    "\16\u0158\13\u0190\17\u0158\1\u0159\2\0\4\u0158\1\u0191\33\u0158"+
    "\1\u016a\1\u016b\3\u0158\1\u016c\3\u0158\1\u016d\3\u0158\1\u016e"+
    "\1\u0159\2\0\37\u0158\1\227\1\u0172\15\227\1\326\2\0"+
    "\2\227\1\u010c\44\227\1\u0192\6\227\1\326\2\0\53\227"+
    "\1\u0193\2\227\1\326\2\0\55\227\2\326\2\0\50\227"+
    "\1\u0179\5\227\1\326\2\0\54\227\1\u0177\1\227\1\326"+
    "\2\0\40\227\1\u0172\1\u014f\3\227\1\u0150\3\227\1\u0151"+
    "\3\227\1\u0152\1\326\2\0\1\227\1\u0153\1\227\1\u0154"+
    "\33\227\1\u0158\1\u0194\1\u016b\3\u0158\1\u016c\3\u0158\1\u016d"+
    "\3\u0158\1\u016e\1\u0159\2\0\1\u0158\1\u016f\1\u0158\1\u0170"+
    "\34\u0158\1\u017a\15\u0158\1\u0159\2\0\46\u0158\1\u0195\7\u0158"+
    "\1\u0159\2\0\52\u0158\1\u0196\3\u0158\1\u0159\2\0\42\u0158"+
    "\1\u0197\2\u0158\10\u0197\1\u0158\1\u0159\2\0\5\u0158\1\u0197"+
    "\16\u0158\13\u0197\1\0\1\u011d\1\u011e\3\0\1\u011f\3\0"+
    "\1\u0120\3\0\1\u0121\1\u0122\5\0\1\u0198\1\u0123\50\0"+
    "\1\u0121\42\0\1\u0122\1\u015f\1\u0160\14\u0122\1\u0140\2\0"+
    "\47\u0122\1\u0199\6\u0122\1\u0140\2\0\53\u0122\1\u019a\2\u0122"+
    "\1\u0140\2\0\55\u0122\1\u019b\1\u0140\2\0\37\u0122\1\u0108"+
    "\1\u019c\1\u0147\3\u0108\1\u0148\3\u0108\1\u0149\3\u0108\1\u014a"+
    "\1\u014b\2\0\1\u0108\1\u014c\1\u0108\1\u014d\34\u0108\1\u0186"+
    "\15\u0108\1\u012e\2\0\46\u0108\1\u019d\7\u0108\1\u012e\2\0"+
    "\52\u0108\1\u019e\3\u0108\1\u012e\2\0\42\u0108\1\u019f\2\u0108"+
    "\10\u019f\1\u0108\1\u012e\2\0\5\u0108\1\u019f\16\u0108\13\u019f"+
    "\11\u0108\1\u018d\5\u0108\1\u012e\2\0\54\u0108\1\u018b\1\u0108"+
    "\1\u012e\2\0\56\u0108\1\u012e\2\0\2\u0108\1\u0166\34\u0108"+
    "\10\u0158\1\u01a0\6\u0158\1\u0159\2\0\53\u0158\1\u01a1\2\u0158"+
    "\1\u0159\2\0\55\u0158\1\u0134\1\u0159\2\0\37\u0158\11\227"+
    "\1\326\5\227\1\326\2\0\54\227\1\u0192\1\227\1\326"+
    "\2\0\37\227\1\u0158\1\u0194\1\u016b\3\u0158\1\u016c\3\u0158"+
    "\1\u016d\3\u0158\1\u016e\1\u0159\2\0\1\u0158\1\u016f\1\u015a"+
    "\1\u0170\43\u0158\1\u01a2\6\u0158\1\u0159\2\0\53\u0158\1\u01a3"+
    "\2\u0158\1\u0159\2\0\55\u0158\1\u014b\1\u0159\2\0\37\u0158"+
    "\6\0\1\u011f\3\0\1\u0120\46\0\11\u0122\1\u01a4\5\u0122"+
    "\1\u0140\2\0\54\u0122\1\u0199\1\u0122\1\u0140\2\0\40\u0122"+
    "\1\u015f\1\u0160\3\u0122\1\u0161\3\u0122\1\u0162\3\u0122\1\u0163"+
    "\1\u0140\2\0\3\u0122\1\u01a5\1\u0164\32\u0122\1\u0108\1\u019c"+
    "\1\u0147\3\u0108\1\u0148\3\u0108\1\u0149\3\u0108\1\u014a\1\u014b"+
    "\2\0\1\u0108\1\u014c\1\u0166\1\u014d\43\u0108\1\u01a6\6\u0108"+
    "\1\u012e\2\0\53\u0108\1\u01a7\2\u0108\1\u012e\2\0\55\u0108"+
    "\2\u012e\2\0\37\u0108\11\u0158\1\u0134\5\u0158\1\u0159\2\0"+
    "\54\u0158\1\u01a0\1\u0158\1\u0159\2\0\50\u0158\1\u014b\5\u0158"+
    "\1\u0159\2\0\54\u0158\1\u01a2\1\u0158\1\u0159\2\0\37\u0158"+
    "\1\u0122\1\u015f\1\u0160\3\u0122\1\u0161\3\u0122\1\u0162\3\u0122"+
    "\1\u0163\1\u0140\2\0\3\u0122\1\u01a8\1\u0164\50\u0122\1\u0163"+
    "\1\u0140\2\0\37\u0122\11\u0108\1\u012e\5\u0108\1\u012e\2\0"+
    "\54\u0108\1\u01a6\1\u0108\1\u012e\2\0\37\u0108\6\u0122\1\u0161"+
    "\3\u0122\1\u0162\4\u0122\1\u0140\2\0\37\u0122";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\12\1\6\11\1\1\1\11"+
    "\4\1\2\11\11\1\1\11\7\1\1\11\11\1\1\0"+
    "\12\1\2\0\1\1\7\0\10\11\15\1\10\0\2\11"+
    "\1\1\5\0\1\11\13\0\13\1\1\11\14\0\13\1"+
    "\6\0\1\11\2\0\1\11\3\0\1\11\7\0\1\11"+
    "\5\0\7\1\1\0\2\1\10\0\1\1\5\0\1\11"+
    "\11\1\1\11\1\0\2\11\2\0\1\11\2\0\3\11"+
    "\3\0\4\11\1\0\4\1\3\0\1\1\20\0\4\1"+
    "\1\0\1\11\2\0\3\11\1\0\2\1\1\11\10\0"+
    "\1\1\20\0\1\1\1\11\1\0\2\11\2\1\37\0"+
    "\1\11\25\0\1\1\4\0\1\1\16\0\1\1\13\0"+
    "\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("error: unknown character " + yytext() + " found at line " + yyline);
          }
        case 61: break;
        case 2: 
          { return new Symbol(sym.INTVAL, (new Integer(yytext())).intValue());
          }
        case 62: break;
        case 3: 
          { return new Symbol(sym.MINUS);
          }
        case 63: break;
        case 4: 
          { return new Symbol(sym.ID, yytext());
          }
        case 64: break;
        case 5: 
          { 
          }
        case 65: break;
        case 6: 
          { return new Symbol(sym.COLON);
          }
        case 66: break;
        case 7: 
          { return new Symbol(sym.COMMA);
          }
        case 67: break;
        case 8: 
          { return new Symbol(sym.LPAREN);
          }
        case 68: break;
        case 9: 
          { return new Symbol(sym.RPAREN);
          }
        case 69: break;
        case 10: 
          { return new Symbol(sym.PLUS);
          }
        case 70: break;
        case 11: 
          { return new Symbol(sym.POWER);
          }
        case 71: break;
        case 12: 
          { return new Symbol(sym.TIMES);
          }
        case 72: break;
        case 13: 
          { return new Symbol(sym.DIVIDE);
          }
        case 73: break;
        case 14: 
          { return new Symbol(sym.SEMI);
          }
        case 74: break;
        case 15: 
          { return new Symbol(sym.EQ);
          }
        case 75: break;
        case 16: 
          { return new Symbol(sym.NEGATE);
          }
        case 76: break;
        case 17: 
          { return new Symbol(sym.LT);
          }
        case 77: break;
        case 18: 
          { return new Symbol(sym.GT);
          }
        case 78: break;
        case 19: 
          { return new Symbol(sym.LBRACE);
          }
        case 79: break;
        case 20: 
          { return new Symbol(sym.RBRACE);
          }
        case 80: break;
        case 21: 
          { return new Symbol(sym.STRVAL, yytext());
          }
        case 81: break;
        case 22: 
          { return new Symbol(sym.LISTVAL, yytext());
          }
        case 82: break;
        case 23: 
          { return new Symbol(sym.CONCAT);
          }
        case 83: break;
        case 24: 
          { yybegin(COMMENT);
          }
        case 84: break;
        case 25: 
          { return new Symbol(sym.EQQ);
          }
        case 85: break;
        case 26: 
          { return new Symbol(sym.NOTEQ);
          }
        case 86: break;
        case 27: 
          { return new Symbol(sym.LTEQ);
          }
        case 87: break;
        case 28: 
          { return new Symbol(sym.GTEQ);
          }
        case 88: break;
        case 29: 
          { return new Symbol(sym.AND);
          }
        case 89: break;
        case 30: 
          { return new Symbol(sym.IF);
          }
        case 90: break;
        case 31: 
          { return new Symbol(sym.IN);
          }
        case 91: break;
        case 32: 
          { return new Symbol(sym.DO);
          }
        case 92: break;
        case 33: 
          { yybegin(YYINITIAL);
          }
        case 93: break;
        case 34: 
          { return new Symbol(sym.LEN);
          }
        case 94: break;
        case 35: 
          { return new Symbol(sym.CHARVAL, yytext());
          }
        case 95: break;
        case 36: 
          { return new Symbol(sym.INT);
          }
        case 96: break;
        case 37: 
          { return new Symbol(sym.DEF);
          }
        case 97: break;
        case 38: 
          { return new Symbol(sym.INDEX, yytext());
          }
        case 98: break;
        case 39: 
          { return new Symbol(sym.BOOLVAL, yytext());
          }
        case 99: break;
        case 40: 
          { return new Symbol(sym.TDEF);
          }
        case 100: break;
        case 41: 
          { return new Symbol(sym.READ);
          }
        case 101: break;
        case 42: 
          { return new Symbol(sym.ELSE);
          }
        case 102: break;
        case 43: 
          { return new Symbol(sym.LIST);
          }
        case 103: break;
        case 44: 
          { return new Symbol(sym.DICTVAL, yytext());
          }
        case 104: break;
        case 45: 
          { return new Symbol(sym.CHAR);
          }
        case 105: break;
        case 46: 
          { return new Symbol(sym.BOOL);
          }
        case 106: break;
        case 47: 
          { return new Symbol(sym.DICT);
          }
        case 107: break;
        case 48: 
          { return new Symbol(sym.MAIN);
          }
        case 108: break;
        case 49: 
          { return new Symbol(sym.VOID);
          }
        case 109: break;
        case 50: 
          { return new Symbol(sym.LISTINDEX, yytext());
          }
        case 110: break;
        case 51: 
          { return new Symbol(sym.DICTINDEX, yytext());
          }
        case 111: break;
        case 52: 
          { return new Symbol(sym.FLOAT);
          }
        case 112: break;
        case 53: 
          { return new Symbol(sym.CLASS);
          }
        case 113: break;
        case 54: 
          { return new Symbol(sym.WHILE);
          }
        case 114: break;
        case 55: 
          { return new Symbol(sym.PRINT);
          }
        case 115: break;
        case 56: 
          { return new Symbol(sym.RETURN);
          }
        case 116: break;
        case 57: 
          { return new Symbol(sym.LEN, yytext());
          }
        case 117: break;
        case 58: 
          { return new Symbol(sym.STRING);
          }
        case 118: break;
        case 59: 
          { return new Symbol(sym.PUBLIC);
          }
        case 119: break;
        case 60: 
          { return new Symbol(sym.FOREACH);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
