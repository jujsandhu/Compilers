/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>/Users/jujsandhu/Documents/Second Year/Compilers/CompilersCWK/QSpecification.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INCOMMENT = 2;
  public static final int ERROR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\15\1\17\1\20\1\16\22\0\1\24\1\33\1\21"+
    "\3\0\1\44\1\14\1\41\1\42\1\31\1\26\1\36\1\3\1\23"+
    "\1\25\12\1\1\30\1\43\1\34\1\32\1\35\2\0\32\2\3\0"+
    "\1\27\1\2\1\0\1\11\1\53\1\51\1\54\1\7\1\10\1\47"+
    "\1\52\1\45\2\2\1\12\1\57\1\46\1\50\1\56\1\2\1\5"+
    "\1\13\1\4\1\6\1\60\1\55\3\2\1\37\1\0\1\40\7\0"+
    "\1\17\u05da\0\12\22\206\0\12\22\306\0\12\22\u019c\0\12\22\166\0"+
    "\12\22\166\0\12\22\166\0\12\22\166\0\12\22\166\0\12\22\166\0"+
    "\12\22\166\0\12\22\166\0\12\22\340\0\12\22\166\0\12\22\106\0"+
    "\12\22\u0116\0\12\22\106\0\12\22\u0746\0\12\22\46\0\12\22\u012c\0"+
    "\12\22\200\0\12\22\246\0\12\22\6\0\12\22\266\0\12\22\126\0"+
    "\12\22\206\0\12\22\6\0\12\22\u03ce\0\1\17\1\17\u85f6\0\12\22"+
    "\u02a6\0\12\22\46\0\12\22\306\0\12\22\166\0\12\22\u0196\0\12\22"+
    "\u5316\0\12\22\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\6\2\1\0\1\4\2\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\0"+
    "\10\2\1\4\1\3\6\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\11\4\1\3\6\0\1\24\1\5"+
    "\11\0\12\2\1\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\4\2\1\37"+
    "\4\2\10\4\1\27\1\40\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\4\4\1\37\4\4\10\0\1\35"+
    "\1\36\4\0\1\37\4\0\1\41\10\2\1\42\2\2"+
    "\1\43\1\4\1\44\2\2\1\45\5\2\6\4\1\42"+
    "\2\4\1\44\2\4\1\45\5\4\6\0\1\42\2\0"+
    "\1\44\2\0\1\45\5\0\1\46\1\47\1\2\1\50"+
    "\1\51\2\2\1\52\1\2\1\53\1\54\1\55\2\2"+
    "\1\56\1\57\1\47\1\4\1\50\1\51\2\4\1\52"+
    "\1\4\1\53\1\54\1\55\2\4\1\56\1\57\1\47"+
    "\1\0\1\50\1\51\2\0\1\52\1\0\1\53\1\54"+
    "\1\55\2\0\1\56\1\57\1\2\1\60\2\2\1\61"+
    "\1\62\1\4\1\60\2\4\1\61\1\62\1\0\1\60"+
    "\2\0\1\61\1\62\1\63\1\2\1\64\1\63\1\4"+
    "\1\64\1\63\1\0\1\64\3\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u027d\0\u027d\0\u0341\0\u027d\0\u0372\0\u03a3\0\u03d4"+
    "\0\u0405\0\u027d\0\u027d\0\u027d\0\u027d\0\u027d\0\u027d\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u05ef\0\u05ef\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u05ef\0\u05ef\0\u05ef\0\u05ef\0\u05ef\0\u05ef\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u027d\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u027d"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u02ae\0\u0f81\0\u027d"+
    "\0\u027d\0\u027d\0\u027d\0\u027d\0\u027d\0\u027d\0\304\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\304\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u05ef\0\u027d\0\u05ef\0\u05ef\0\u05ef\0\u05ef\0\u05ef"+
    "\0\u05ef\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u05ef\0\u13e8"+
    "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u15a1\0\u15d2\0\u1603\0\u027d\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u027d\0\u1729\0\u175a\0\u178b\0\u17bc\0\u0d35\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\304"+
    "\0\u1975\0\u19a6\0\u027d\0\u19d7\0\304\0\u1a08\0\u1a39\0\304"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u05ef\0\u1c85\0\u1cb6\0\u05ef\0\u1ce7"+
    "\0\u1d18\0\u05ef\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u027d\0\u1f64\0\u1f95"+
    "\0\u027d\0\u1fc6\0\u1ff7\0\u027d\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\304\0\304\0\u211d\0\304\0\304\0\u214e\0\u217f"+
    "\0\304\0\u21b0\0\304\0\304\0\304\0\u21e1\0\u2212\0\304"+
    "\0\304\0\u05ef\0\u2243\0\u05ef\0\u05ef\0\u2274\0\u22a5\0\u05ef"+
    "\0\u22d6\0\u05ef\0\u05ef\0\u05ef\0\u2307\0\u2338\0\u05ef\0\u05ef"+
    "\0\u027d\0\u2369\0\u027d\0\u027d\0\u239a\0\u23cb\0\u027d\0\u23fc"+
    "\0\u027d\0\u027d\0\u027d\0\u242d\0\u245e\0\u027d\0\u027d\0\u248f"+
    "\0\304\0\u24c0\0\u24f1\0\304\0\304\0\u2522\0\u05ef\0\u2553"+
    "\0\u2584\0\u05ef\0\u05ef\0\u25b5\0\u027d\0\u25e6\0\u2617\0\u027d"+
    "\0\u027d\0\304\0\u2648\0\304\0\u05ef\0\u2679\0\u05ef\0\u027d"+
    "\0\u26aa\0\u027d\0\304\0\u05ef\0\u027d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\7\1\10\1\5\1\11"+
    "\1\12\1\5\1\13\1\14\1\15\2\16\1\0\1\16"+
    "\1\17\1\20\1\0\1\16\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\3\5\1\42\1\5"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\3\51\1\52"+
    "\1\53\1\54\1\51\1\55\1\56\1\51\1\57\1\60"+
    "\1\51\1\16\7\51\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\3\51\1\102\1\51\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\3\0\1\111\1\112"+
    "\1\113\1\0\1\114\1\115\1\0\1\116\1\117\1\0"+
    "\2\120\1\0\1\120\3\0\1\120\1\121\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\122\3\0\1\123"+
    "\1\0\1\124\1\125\1\126\1\127\1\130\1\131\1\0"+
    "\1\4\20\0\1\20\1\132\36\0\2\5\1\0\10\5"+
    "\31\0\14\5\1\0\1\4\20\0\1\20\37\0\2\5"+
    "\1\0\1\5\1\133\6\5\31\0\7\5\1\134\4\5"+
    "\1\0\2\5\1\0\3\5\1\135\4\5\31\0\14\5"+
    "\1\0\2\5\1\0\6\5\1\136\1\5\31\0\14\5"+
    "\1\0\2\5\1\0\5\5\1\137\1\140\1\5\31\0"+
    "\3\5\1\141\10\5\1\0\2\5\1\0\3\5\1\142"+
    "\4\5\31\0\1\143\13\5\1\0\2\5\1\0\1\144"+
    "\7\5\31\0\14\5\15\145\4\0\40\145\61\0\15\17"+
    "\4\0\1\146\37\17\1\0\1\20\20\0\1\20\1\132"+
    "\62\0\1\147\3\0\1\150\57\0\1\151\62\0\1\152"+
    "\60\0\1\153\60\0\1\154\60\0\1\155\72\0\1\156"+
    "\15\0\2\5\1\0\4\5\1\157\3\5\31\0\1\5"+
    "\1\160\12\5\1\0\2\5\1\0\10\5\31\0\5\5"+
    "\1\161\6\5\1\0\2\5\1\0\10\5\31\0\3\5"+
    "\1\162\10\5\1\0\2\5\1\0\3\5\1\163\4\5"+
    "\31\0\1\164\2\5\1\165\10\5\1\0\2\5\1\0"+
    "\10\5\31\0\5\5\1\166\6\5\1\0\2\5\1\0"+
    "\1\5\1\167\6\5\31\0\14\5\1\0\2\5\1\0"+
    "\5\5\1\170\2\5\31\0\14\5\1\0\2\5\1\0"+
    "\10\5\31\0\3\5\1\171\10\5\15\51\1\0\13\51"+
    "\1\0\44\51\1\0\13\51\1\0\22\51\1\172\13\51"+
    "\1\173\5\51\1\0\13\51\1\0\41\51\1\174\2\51"+
    "\1\0\13\51\1\0\41\51\1\175\2\51\1\0\13\51"+
    "\1\0\16\51\1\176\17\51\1\177\5\51\1\0\13\51"+
    "\1\0\13\51\1\200\17\51\1\201\10\51\1\0\13\51"+
    "\1\0\44\51\1\0\13\51\1\150\44\51\1\0\12\51"+
    "\1\202\1\0\27\51\25\0\1\203\33\0\15\51\1\0"+
    "\13\51\1\0\1\204\43\51\1\0\13\51\1\0\1\205"+
    "\43\51\1\0\13\51\1\0\1\206\43\51\1\0\13\51"+
    "\1\0\1\207\43\51\1\0\13\51\1\0\12\51\1\210"+
    "\24\51\1\211\4\51\1\0\13\51\1\0\14\51\1\212"+
    "\27\51\1\0\13\51\1\0\20\51\1\213\23\51\1\0"+
    "\13\51\1\0\16\51\1\214\17\51\1\215\5\51\1\0"+
    "\13\51\1\0\13\51\1\216\2\51\1\217\25\51\1\0"+
    "\13\51\1\0\20\51\1\220\13\51\1\221\7\51\1\0"+
    "\13\51\1\0\40\51\1\222\3\51\1\0\13\51\1\0"+
    "\44\51\1\0\13\51\1\0\16\51\1\223\10\51\54\0"+
    "\1\224\13\0\1\225\63\0\1\226\60\0\1\227\35\0"+
    "\1\230\17\0\1\231\35\0\1\232\17\0\1\233\105\0"+
    "\1\150\37\0\1\234\35\0\1\235\64\0\1\236\56\0"+
    "\1\237\17\0\1\240\35\0\1\241\2\0\1\242\62\0"+
    "\1\243\13\0\1\244\64\0\1\245\117\0\1\246\11\0"+
    "\1\247\20\0\1\247\37\0\2\5\1\0\2\5\1\250"+
    "\5\5\31\0\14\5\1\0\2\5\1\0\3\5\1\251"+
    "\4\5\31\0\14\5\1\0\2\5\1\0\1\252\4\5"+
    "\1\253\2\5\31\0\14\5\1\0\2\5\1\0\7\5"+
    "\1\254\31\0\14\5\1\0\2\5\1\0\6\5\1\255"+
    "\1\5\31\0\14\5\1\0\2\5\1\0\10\5\31\0"+
    "\3\5\1\256\10\5\1\0\2\5\1\0\1\5\1\257"+
    "\6\5\31\0\14\5\1\0\2\5\1\0\10\5\31\0"+
    "\1\5\1\260\12\5\1\0\2\5\1\0\7\5\1\261"+
    "\31\0\14\5\1\0\2\5\1\0\1\5\1\262\6\5"+
    "\31\0\14\5\14\0\1\263\44\0\15\147\1\16\1\264"+
    "\2\0\40\147\1\0\2\5\1\0\1\265\7\5\31\0"+
    "\14\5\1\0\2\5\1\0\5\5\1\266\2\5\31\0"+
    "\14\5\1\0\2\5\1\0\10\5\31\0\3\5\1\267"+
    "\10\5\1\0\2\5\1\0\4\5\1\270\3\5\31\0"+
    "\14\5\1\0\2\5\1\0\10\5\31\0\4\5\1\271"+
    "\7\5\1\0\2\5\1\0\10\5\31\0\1\272\13\5"+
    "\1\0\2\5\1\0\10\5\31\0\1\273\13\5\1\0"+
    "\2\5\1\0\10\5\31\0\1\274\13\5\1\0\2\5"+
    "\1\0\10\5\31\0\1\275\13\5\7\51\1\276\5\51"+
    "\1\0\13\51\1\0\33\51\1\277\4\51\1\300\3\51"+
    "\1\0\13\51\1\0\42\51\1\301\1\51\1\0\13\51"+
    "\1\0\44\51\1\0\13\51\1\0\16\51\1\302\15\51"+
    "\1\303\7\51\1\0\13\51\1\0\44\51\1\0\13\51"+
    "\1\0\14\51\1\304\25\51\1\305\1\51\1\0\13\51"+
    "\1\0\34\51\1\306\7\51\1\0\13\51\1\0\33\51"+
    "\1\307\10\51\1\0\13\51\1\0\40\51\1\310\3\51"+
    "\1\0\13\51\1\0\44\51\1\0\13\51\1\0\16\51"+
    "\1\311\20\51\1\312\4\51\1\0\13\51\1\0\44\51"+
    "\1\0\13\51\1\0\17\51\1\313\24\51\1\0\13\51"+
    "\1\0\13\51\1\314\30\51\1\0\13\51\1\0\13\51"+
    "\1\315\30\51\1\0\13\51\1\0\13\51\1\316\30\51"+
    "\1\0\13\51\1\0\13\51\1\317\13\51\7\0\1\320"+
    "\55\0\1\321\4\0\1\322\62\0\1\323\115\0\1\324"+
    "\15\0\1\325\121\0\1\326\25\0\1\327\52\0\1\330"+
    "\57\0\1\331\65\0\1\332\117\0\1\333\20\0\1\334"+
    "\121\0\1\335\54\0\1\336\60\0\1\337\60\0\1\340"+
    "\60\0\1\341\14\0\2\5\1\0\3\5\1\342\4\5"+
    "\31\0\14\5\1\0\2\5\1\0\4\5\1\343\3\5"+
    "\31\0\14\5\1\0\2\5\1\0\2\5\1\344\5\5"+
    "\31\0\14\5\1\0\2\5\1\0\10\5\31\0\7\5"+
    "\1\345\4\5\1\0\2\5\1\0\3\5\1\346\4\5"+
    "\31\0\14\5\1\0\2\5\1\0\7\5\1\250\31\0"+
    "\14\5\1\0\2\5\1\0\5\5\1\347\2\5\31\0"+
    "\14\5\1\0\2\5\1\0\3\5\1\350\4\5\31\0"+
    "\14\5\1\0\2\5\1\0\1\351\7\5\31\0\14\5"+
    "\1\0\2\5\1\0\10\5\31\0\1\352\13\5\15\0"+
    "\1\16\44\0\2\5\1\0\1\5\1\353\6\5\31\0"+
    "\14\5\1\0\2\5\1\0\6\5\1\354\1\5\31\0"+
    "\14\5\1\0\2\5\1\0\1\355\7\5\31\0\14\5"+
    "\1\0\2\5\1\0\6\5\1\356\1\5\31\0\14\5"+
    "\1\0\2\5\1\0\10\5\31\0\1\5\1\357\12\5"+
    "\1\0\2\5\1\0\10\5\31\0\1\5\1\360\12\5"+
    "\1\0\2\5\1\0\10\5\31\0\7\5\1\361\4\5"+
    "\10\51\1\362\4\51\1\0\13\51\1\0\35\51\1\363"+
    "\6\51\1\0\13\51\1\0\44\51\1\0\13\51\1\0"+
    "\22\51\1\364\13\51\1\365\5\51\1\0\13\51\1\0"+
    "\40\51\1\366\3\51\1\0\13\51\1\0\36\51\1\367"+
    "\5\51\1\0\13\51\1\0\33\51\1\370\10\51\1\0"+
    "\13\51\1\0\44\51\1\0\13\51\1\0\13\51\1\371"+
    "\20\51\1\372\7\51\1\0\13\51\1\0\41\51\1\373"+
    "\2\51\1\0\13\51\1\0\33\51\1\374\10\51\1\0"+
    "\13\51\1\0\41\51\1\375\2\51\1\0\13\51\1\0"+
    "\44\51\1\0\13\51\1\0\14\51\1\376\27\51\1\0"+
    "\13\51\1\0\14\51\1\377\27\51\1\0\13\51\1\0"+
    "\22\51\1\u0100\4\51\10\0\1\u0101\56\0\1\u0102\126\0"+
    "\1\u0103\13\0\1\u0104\62\0\1\u0105\56\0\1\u0106\55\0"+
    "\1\u0107\121\0\1\u0108\20\0\1\u0109\65\0\1\u010a\52\0"+
    "\1\u010b\66\0\1\u010c\114\0\1\u010d\60\0\1\u010e\66\0"+
    "\1\u010f\5\0\2\5\1\0\1\5\1\u0110\6\5\31\0"+
    "\14\5\1\0\2\5\1\0\1\u0111\7\5\31\0\14\5"+
    "\1\0\2\5\1\0\5\5\1\u0112\2\5\31\0\14\5"+
    "\1\0\2\5\1\0\10\5\31\0\1\5\1\u0113\12\5"+
    "\1\0\2\5\1\0\3\5\1\u0114\4\5\31\0\14\5"+
    "\1\0\2\5\1\0\1\u0115\7\5\31\0\14\5\5\51"+
    "\1\u0116\7\51\1\0\13\51\1\0\33\51\1\u0117\10\51"+
    "\1\0\13\51\1\0\40\51\1\u0118\3\51\1\0\13\51"+
    "\1\0\44\51\1\0\13\51\1\0\14\51\1\u0119\21\51"+
    "\1\u011a\5\51\1\0\13\51\1\0\33\51\1\u011b\10\51"+
    "\1\0\13\51\1\0\27\51\5\0\1\u011c\57\0\1\u011d"+
    "\65\0\1\u011e\115\0\1\u011f\21\0\1\u0120\55\0\1\u0121"+
    "\55\0\2\5\1\0\10\5\31\0\1\5\1\u0122\12\5"+
    "\1\0\2\5\1\0\10\5\31\0\4\5\1\u0123\7\5"+
    "\1\0\2\5\1\0\10\5\31\0\2\5\1\u0124\11\5"+
    "\15\51\1\0\13\51\1\0\14\51\1\u0125\27\51\1\0"+
    "\13\51\1\0\17\51\1\u0126\24\51\1\0\13\51\1\0"+
    "\15\51\1\u0127\11\51\46\0\1\u0128\63\0\1\u0129\56\0"+
    "\1\u012a\12\0\2\5\1\0\10\5\31\0\5\5\1\u012b"+
    "\6\5\15\51\1\0\13\51\1\0\20\51\1\u012c\6\51"+
    "\52\0\1\u012d\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9947];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\11\1\1\0\1\11\2\0\1\1\2\11\1\1"+
    "\1\11\4\1\6\11\1\0\50\1\1\11\6\0\1\11"+
    "\1\1\11\0\12\1\1\0\1\1\1\0\7\11\24\1"+
    "\1\11\20\1\10\0\1\11\1\1\4\0\1\11\4\0"+
    "\14\1\1\11\34\1\6\0\1\11\2\0\1\11\2\0"+
    "\1\11\5\0\37\1\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\3\11\2\0\2\11\14\1\1\0\1\11\2\0"+
    "\2\11\6\1\1\11\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(sym.INTEGER, Integer.parseInt(yytext()));
          }
        case 54: break;
        case 2: 
          { return new Symbol(sym.ID, yytext());
          }
        case 55: break;
        case 3: 
          { return new Symbol(sym.MINUS);
          }
        case 56: break;
        case 4: 
          { 
          }
        case 57: break;
        case 5: 
          { return new Symbol(sym.DIVIDE);
          }
        case 58: break;
        case 6: 
          { return new Symbol(sym.PLUS);
          }
        case 59: break;
        case 7: 
          { return new Symbol(sym.POWER);
          }
        case 60: break;
        case 8: 
          { return new Symbol(sym.COLON);
          }
        case 61: break;
        case 9: 
          { return new Symbol(sym.TIMES);
          }
        case 62: break;
        case 10: 
          { return new Symbol(sym.EQ);
          }
        case 63: break;
        case 11: 
          { return new Symbol(sym.NEGATE);
          }
        case 64: break;
        case 12: 
          { return new Symbol(sym.LT);
          }
        case 65: break;
        case 13: 
          { return new Symbol(sym.GT);
          }
        case 66: break;
        case 14: 
          { return new Symbol(sym.COMMA);
          }
        case 67: break;
        case 15: 
          { return new Symbol(sym.LBRACE);
          }
        case 68: break;
        case 16: 
          { return new Symbol(sym.RBRACE);
          }
        case 69: break;
        case 17: 
          { return new Symbol(sym.LPAREN);
          }
        case 70: break;
        case 18: 
          { return new Symbol(sym.RPAREN);
          }
        case 71: break;
        case 19: 
          { return new Symbol(sym.SEMI);
          }
        case 72: break;
        case 20: 
          { yypushback(1);
					yybegin(YYINITIAL);
					System.err.println("Error: unknown input " + yytext() + " found at line " + yyline + ", character " + yycolumn);
          }
        case 73: break;
        case 21: 
          { return new Symbol(sym.STRINGLITERAL, yytext().substring(1, yytext().length() - 1));
          }
        case 74: break;
        case 22: 
          { yybegin(INCOMMENT);
          }
        case 75: break;
        case 23: 
          { return new Symbol(sym.CONCAT);
          }
        case 76: break;
        case 24: 
          { return new Symbol(sym.EQQ);
          }
        case 77: break;
        case 25: 
          { return new Symbol(sym.NOTEQ);
          }
        case 78: break;
        case 26: 
          { return new Symbol(sym.LTEQ);
          }
        case 79: break;
        case 27: 
          { return new Symbol(sym.GTEQ);
          }
        case 80: break;
        case 28: 
          { return new Symbol(sym.AND);
          }
        case 81: break;
        case 29: 
          { return new Symbol(sym.IF);
          }
        case 82: break;
        case 30: 
          { return new Symbol(sym.IN);
          }
        case 83: break;
        case 31: 
          { return new Symbol(sym.DO);
          }
        case 84: break;
        case 32: 
          { yybegin(YYINITIAL);
          }
        case 85: break;
        case 33: 
          { return new Symbol(sym.FLOATLITERAL, yytext());
          }
        case 86: break;
        case 34: 
          { return new Symbol(sym.LEN);
          }
        case 87: break;
        case 35: 
          { return new Symbol(sym.CHARLITERAL, yytext().charAt(1));
          }
        case 88: break;
        case 36: 
          { return new Symbol(sym.INT);
          }
        case 89: break;
        case 37: 
          { return new Symbol(sym.DEF);
          }
        case 90: break;
        case 38: 
          { return new Symbol(sym.BOOLEANLITERAL, yytext().equals("true"));
          }
        case 91: break;
        case 39: 
          { return new Symbol(sym.TDEF);
          }
        case 92: break;
        case 40: 
          { return new Symbol(sym.READ);
          }
        case 93: break;
        case 41: 
          { return new Symbol(sym.ELSE);
          }
        case 94: break;
        case 42: 
          { return new Symbol(sym.LIST);
          }
        case 95: break;
        case 43: 
          { return new Symbol(sym.CHAR);
          }
        case 96: break;
        case 44: 
          { return new Symbol(sym.BOOL);
          }
        case 97: break;
        case 45: 
          { return new Symbol(sym.DICT);
          }
        case 98: break;
        case 46: 
          { return new Symbol(sym.MAIN);
          }
        case 99: break;
        case 47: 
          { return new Symbol(sym.VOID);
          }
        case 100: break;
        case 48: 
          { return new Symbol(sym.FLOAT);
          }
        case 101: break;
        case 49: 
          { return new Symbol(sym.WHILE);
          }
        case 102: break;
        case 50: 
          { return new Symbol(sym.PRINT);
          }
        case 103: break;
        case 51: 
          { return new Symbol(sym.RETURN);
          }
        case 104: break;
        case 52: 
          { return new Symbol(sym.STRING);
          }
        case 105: break;
        case 53: 
          { return new Symbol(sym.FOREACH);
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
